>> %             th    d       a    alpha
L(1) = Link([ 0     0.412   0   -pi/2     0]);
L(2) = Link([ 0     0.154   0    pi/2     0]);
L(3) = Link([ -pi/2 0       0    0        1]);  % PRISMATIC link, faz com que o braço do nosso robô se estenda
L(4) = Link([ 0     0       0   -pi/2     0]);
L(5) = Link([ 0     0       0    pi/2     0]);
L(6) = Link([ 0     0       0    0        0]);

%theta = ângulo da articulação
%d = offset do link da posição inicial
%a = length do link
%alpha = orientação do link (em radianos)

%limita até onde as juntas(joints) podem ir [min max]
L(1).qlim = [-170 170]*pi/180;
L(2).qlim = [-170 170]*pi/180;
L(3).qlim = [12 12+38] * 0.0254;
L(4).qlim = [-170 170]*pi/180;
L(5).qlim = [-90 90]*pi/180;
L(6).qlim = [-170 170]*pi/180;
>> sta = SerialLink(L, 'name', 'Stanford arm');
>> %posições do nosso robô
qz = [0 0 0 0 0 0];
>> qr = [pi pi/4 0 0 0 0];
>> qs = [pi pi/4 pi/2 0 0 0];
>> qn=[pi pi/1.5 pi/2 0 0 0];
>> qx = [pi pi/1.5 pi/2 pi pi 0];
>> qy = [0 0 pi/2 0 0 0];
>> 
>> %animação entre duas posições e o tempo de animação
>> qzr = jtraj(qz,qr,50);
>> qrs = jtraj(qr,qs,50);
>> qsn = jtraj(qs,qn,50);
>> qnx = jtraj(qn,qx,50);
>> qxy = jtraj(qx,qy,50);
>> 
>> 
>> sta
 
sta = 
 
Stanford arm:: 6 axis, RRPRRR, stdDH, slowRNE                    
+---+-----------+-----------+-----------+-----------+-----------+
| j |     theta |         d |         a |     alpha |    offset |
+---+-----------+-----------+-----------+-----------+-----------+
|  1|         q1|      0.412|          0|    -1.5708|          0|
|  2|         q2|      0.154|          0|     1.5708|          0|
|  3|    -1.5708|         q3|          0|          0|          0|
|  4|         q4|          0|          0|    -1.5708|          0|
|  5|         q5|          0|          0|     1.5708|          0|
|  6|         q6|          0|          0|          0|          0|
+---+-----------+-----------+-----------+-----------+-----------+
 
>> T= sta.fkine(qz)
 

T = 
         0         1         0         0
        -1         0         0     0.154
         0         0         1     0.412
         0         0         0         1
>> 
>> sta.ikine(T, 'mask', [1 1 1 0 0 1])

ans =

     0     0     0     0     0     0

>> tic; sta.ikine(T, 'mask', [1 1 1 0 0 1]); toc
Elapsed time is 0.008881 seconds.